/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.21.12
// source: Task.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as Task_pb from './Task_pb';
import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb';


export class TaskServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorcreate_task = new grpcWeb.MethodDescriptor(
    '/TaskService/create_task',
    grpcWeb.MethodType.UNARY,
    Task_pb.CreateTaskRequest,
    Task_pb.CreateTaskResponse,
    (request: Task_pb.CreateTaskRequest) => {
      return request.serializeBinary();
    },
    Task_pb.CreateTaskResponse.deserializeBinary
  );

  create_task(
    request: Task_pb.CreateTaskRequest,
    metadata: grpcWeb.Metadata | null): Promise<Task_pb.CreateTaskResponse>;

  create_task(
    request: Task_pb.CreateTaskRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: Task_pb.CreateTaskResponse) => void): grpcWeb.ClientReadableStream<Task_pb.CreateTaskResponse>;

  create_task(
    request: Task_pb.CreateTaskRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: Task_pb.CreateTaskResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/TaskService/create_task',
        request,
        metadata || {},
        this.methodDescriptorcreate_task,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/TaskService/create_task',
    request,
    metadata || {},
    this.methodDescriptorcreate_task);
  }

  methodDescriptorget_task = new grpcWeb.MethodDescriptor(
    '/TaskService/get_task',
    grpcWeb.MethodType.UNARY,
    Task_pb.GetTaskRequest,
    Task_pb.GetTaskResponse,
    (request: Task_pb.GetTaskRequest) => {
      return request.serializeBinary();
    },
    Task_pb.GetTaskResponse.deserializeBinary
  );

  get_task(
    request: Task_pb.GetTaskRequest,
    metadata: grpcWeb.Metadata | null): Promise<Task_pb.GetTaskResponse>;

  get_task(
    request: Task_pb.GetTaskRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: Task_pb.GetTaskResponse) => void): grpcWeb.ClientReadableStream<Task_pb.GetTaskResponse>;

  get_task(
    request: Task_pb.GetTaskRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: Task_pb.GetTaskResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/TaskService/get_task',
        request,
        metadata || {},
        this.methodDescriptorget_task,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/TaskService/get_task',
    request,
    metadata || {},
    this.methodDescriptorget_task);
  }

  methodDescriptorget_all_tasks = new grpcWeb.MethodDescriptor(
    '/TaskService/get_all_tasks',
    grpcWeb.MethodType.UNARY,
    google_protobuf_empty_pb.Empty,
    Task_pb.GetAllTasksResponse,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    Task_pb.GetAllTasksResponse.deserializeBinary
  );

  get_all_tasks(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<Task_pb.GetAllTasksResponse>;

  get_all_tasks(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: Task_pb.GetAllTasksResponse) => void): grpcWeb.ClientReadableStream<Task_pb.GetAllTasksResponse>;

  get_all_tasks(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: Task_pb.GetAllTasksResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/TaskService/get_all_tasks',
        request,
        metadata || {},
        this.methodDescriptorget_all_tasks,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/TaskService/get_all_tasks',
    request,
    metadata || {},
    this.methodDescriptorget_all_tasks);
  }

  methodDescriptorupdate_task = new grpcWeb.MethodDescriptor(
    '/TaskService/update_task',
    grpcWeb.MethodType.UNARY,
    Task_pb.UpdateTaskRequest,
    google_protobuf_empty_pb.Empty,
    (request: Task_pb.UpdateTaskRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  update_task(
    request: Task_pb.UpdateTaskRequest,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  update_task(
    request: Task_pb.UpdateTaskRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  update_task(
    request: Task_pb.UpdateTaskRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/TaskService/update_task',
        request,
        metadata || {},
        this.methodDescriptorupdate_task,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/TaskService/update_task',
    request,
    metadata || {},
    this.methodDescriptorupdate_task);
  }

  methodDescriptordelete_task = new grpcWeb.MethodDescriptor(
    '/TaskService/delete_task',
    grpcWeb.MethodType.UNARY,
    Task_pb.DeleteTaskRequest,
    google_protobuf_empty_pb.Empty,
    (request: Task_pb.DeleteTaskRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  delete_task(
    request: Task_pb.DeleteTaskRequest,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  delete_task(
    request: Task_pb.DeleteTaskRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  delete_task(
    request: Task_pb.DeleteTaskRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/TaskService/delete_task',
        request,
        metadata || {},
        this.methodDescriptordelete_task,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/TaskService/delete_task',
    request,
    metadata || {},
    this.methodDescriptordelete_task);
  }

  methodDescriptordelete_all_tasks = new grpcWeb.MethodDescriptor(
    '/TaskService/delete_all_tasks',
    grpcWeb.MethodType.UNARY,
    google_protobuf_empty_pb.Empty,
    Task_pb.DeleteAllTasksResponse,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    Task_pb.DeleteAllTasksResponse.deserializeBinary
  );

  delete_all_tasks(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<Task_pb.DeleteAllTasksResponse>;

  delete_all_tasks(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: Task_pb.DeleteAllTasksResponse) => void): grpcWeb.ClientReadableStream<Task_pb.DeleteAllTasksResponse>;

  delete_all_tasks(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: Task_pb.DeleteAllTasksResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/TaskService/delete_all_tasks',
        request,
        metadata || {},
        this.methodDescriptordelete_all_tasks,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/TaskService/delete_all_tasks',
    request,
    metadata || {},
    this.methodDescriptordelete_all_tasks);
  }

}

